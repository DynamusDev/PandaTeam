{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TextField = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _theme = require(\"../../theme\");\n\nvar _i18n = require(\"../../i18n\");\n\nvar _ramda = require(\"ramda\");\n\nvar _jsxFileName = \"/Users/alexandrenascimento/Desktop/projetos/PandaTeam/Pandas/app/components/text-field/text-field.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar CONTAINER = {};\nvar INPUT = {\n  fontFamily: _theme.typography.primary,\n  color: _theme.color.palette.lightGrey,\n  width: 280,\n  textAlign: 'center',\n  fontSize: 18,\n  borderWidth: 1,\n  borderColor: _theme.color.palette.lightGrey,\n  backgroundColor: _theme.color.palette.white,\n  borderRadius: 8\n};\nvar PRESETS = {\n  default: {}\n};\n\nvar enhance = function enhance(style, styleOverride) {\n  return (0, _ramda.mergeAll)((0, _ramda.flatten)([style, styleOverride]));\n};\n\nvar TextField = function TextField(props) {\n  var placeholderTx = props.placeholderTx,\n      placeholder = props.placeholder,\n      labelTx = props.labelTx,\n      label = props.label,\n      hidden = props.hidden,\n      _props$preset = props.preset,\n      preset = _props$preset === void 0 ? \"default\" : _props$preset,\n      styleOverride = props.style,\n      inputStyleOverride = props.inputStyle,\n      forwardedRef = props.forwardedRef,\n      rest = (0, _objectWithoutProperties2.default)(props, [\"placeholderTx\", \"placeholder\", \"labelTx\", \"label\", \"hidden\", \"preset\", \"style\", \"inputStyle\", \"forwardedRef\"]);\n\n  var containerStyle = _objectSpread(_objectSpread({}, CONTAINER), PRESETS[preset]);\n\n  containerStyle = enhance(containerStyle, styleOverride);\n  var inputStyle = INPUT;\n  inputStyle = enhance(inputStyle, inputStyleOverride);\n  var actualPlaceholder = placeholderTx ? (0, _i18n.translate)(placeholderTx) : placeholder;\n  return _react.default.createElement(_reactNative.View, {\n    style: containerStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  }, hidden === false ? _react.default.createElement(_reactNative.TextInput, (0, _extends2.default)({\n    placeholder: actualPlaceholder,\n    placeholderTextColor: _theme.color.palette.lighterGrey,\n    underlineColorAndroid: _theme.color.transparent\n  }, rest, {\n    style: inputStyle,\n    ref: forwardedRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  })) : null);\n};\n\nexports.TextField = TextField;","map":{"version":3,"sources":["/Users/alexandrenascimento/Desktop/projetos/PandaTeam/Pandas/app/components/text-field/text-field.tsx"],"names":["CONTAINER","INPUT","fontFamily","typography","primary","color","palette","lightGrey","width","textAlign","fontSize","borderWidth","borderColor","backgroundColor","white","borderRadius","PRESETS","default","enhance","style","styleOverride","TextField","props","placeholderTx","placeholder","labelTx","label","hidden","preset","inputStyleOverride","inputStyle","forwardedRef","rest","containerStyle","actualPlaceholder","lighterGrey","transparent"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAIA;;;;;;;;AAGA,IAAMA,SAAoB,GAAG,EAA7B;AAIA,IAAMC,KAAgB,GAAG;AACvBC,EAAAA,UAAU,EAAEC,kBAAWC,OADA;AAEvBC,EAAAA,KAAK,EAAEA,aAAMC,OAAN,CAAcC,SAFE;AAGvBC,EAAAA,KAAK,EAAE,GAHgB;AAIvBC,EAAAA,SAAS,EAAE,QAJY;AAKvBC,EAAAA,QAAQ,EAAE,EALa;AAMvBC,EAAAA,WAAW,EAAE,CANU;AAOvBC,EAAAA,WAAW,EAAEP,aAAMC,OAAN,CAAcC,SAPJ;AAQvBM,EAAAA,eAAe,EAAER,aAAMC,OAAN,CAAcQ,KARR;AASvBC,EAAAA,YAAY,EAAE;AATS,CAAzB;AAaA,IAAMC,OAAsC,GAAG;AAC7CC,EAAAA,OAAO,EAAE;AADoC,CAA/C;;AAIA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,KAAD,EAAQC,aAAR,EAA0B;AACxC,SAAO,qBAAS,oBAAQ,CAACD,KAAD,EAAQC,aAAR,CAAR,CAAT,CAAP;AACD,CAFD;;AAOO,IAAMC,SAAoC,GAAG,SAAvCA,SAAuC,CAAAC,KAAK,EAAI;AAAA,MAEzDC,aAFyD,GAYvDD,KAZuD,CAEzDC,aAFyD;AAAA,MAGzDC,WAHyD,GAYvDF,KAZuD,CAGzDE,WAHyD;AAAA,MAIzDC,OAJyD,GAYvDH,KAZuD,CAIzDG,OAJyD;AAAA,MAKzDC,KALyD,GAYvDJ,KAZuD,CAKzDI,KALyD;AAAA,MAMzDC,MANyD,GAYvDL,KAZuD,CAMzDK,MANyD;AAAA,sBAYvDL,KAZuD,CAOzDM,MAPyD;AAAA,MAOzDA,MAPyD,8BAOhD,SAPgD;AAAA,MAQlDR,aARkD,GAYvDE,KAZuD,CAQzDH,KARyD;AAAA,MAS7CU,kBAT6C,GAYvDP,KAZuD,CASzDQ,UATyD;AAAA,MAUzDC,YAVyD,GAYvDT,KAZuD,CAUzDS,YAVyD;AAAA,MAWtDC,IAXsD,0CAYvDV,KAZuD;;AAa3D,MAAIW,cAAyB,mCAAQjC,SAAR,GAAsBgB,OAAO,CAACY,MAAD,CAA7B,CAA7B;;AACAK,EAAAA,cAAc,GAAGf,OAAO,CAACe,cAAD,EAAiBb,aAAjB,CAAxB;AAEA,MAAIU,UAAqB,GAAG7B,KAA5B;AACA6B,EAAAA,UAAU,GAAGZ,OAAO,CAACY,UAAD,EAAaD,kBAAb,CAApB;AACA,MAAMK,iBAAiB,GAAGX,aAAa,GAAG,qBAAUA,aAAV,CAAH,GAA8BC,WAArE;AAEA,SACE,6BAAC,iBAAD;AAAM,IAAA,KAAK,EAAES,cAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGN,MAAM,KAAG,KAAT,GACC,6BAAC,sBAAD;AACE,IAAA,WAAW,EAAEO,iBADf;AAEE,IAAA,oBAAoB,EAAE7B,aAAMC,OAAN,CAAc6B,WAFtC;AAGE,IAAA,qBAAqB,EAAE9B,aAAM+B;AAH/B,KAIMJ,IAJN;AAKE,IAAA,KAAK,EAAEF,UALT;AAME,IAAA,GAAG,EAAEC,YANP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADD,GASG,IAVN,CADF;AAcD,CAlCM","sourcesContent":["import React, { FunctionComponent as Component } from \"react\"\nimport { View, TextInput, TextStyle, ViewStyle } from \"react-native\"\nimport { color, spacing, typography } from \"../../theme\"\nimport { translate } from \"../../i18n\"\nimport { Text } from \"../text/text\"\nimport PropTypes from 'prop-types';\nimport { TextFieldProps } from \"./text-field.props\"\nimport { mergeAll, flatten } from \"ramda\"\n\n// the base styling for the container\nconst CONTAINER: ViewStyle = {\n}\n\n// the base styling for the TextInput\nconst INPUT: TextStyle = {\n  fontFamily: typography.primary,\n  color: color.palette.lightGrey,\n  width: 280,\n  textAlign: 'center',\n  fontSize: 18,\n  borderWidth: 1,\n  borderColor: color.palette.lightGrey,\n  backgroundColor: color.palette.white,\n  borderRadius: 8\n}\n\n// currently we have no presets, but that changes quickly when you build your app.\nconst PRESETS: { [name: string]: ViewStyle } = {\n  default: {},\n}\n\nconst enhance = (style, styleOverride) => {\n  return mergeAll(flatten([style, styleOverride]))\n}\n\n/**\n * A component which has a label and an input together.\n */\nexport const TextField: Component<TextFieldProps> = props => {\n  const {\n    placeholderTx,\n    placeholder,\n    labelTx,\n    label,\n    hidden,\n    preset = \"default\",\n    style: styleOverride,\n    inputStyle: inputStyleOverride,\n    forwardedRef,\n    ...rest\n  } = props\n  let containerStyle: ViewStyle = { ...CONTAINER, ...PRESETS[preset] }\n  containerStyle = enhance(containerStyle, styleOverride)\n\n  let inputStyle: TextStyle = INPUT\n  inputStyle = enhance(inputStyle, inputStyleOverride)\n  const actualPlaceholder = placeholderTx ? translate(placeholderTx) : placeholder\n\n  return (\n    <View style={containerStyle}>\n      {hidden===false ? (\n        <TextInput\n          placeholder={actualPlaceholder}\n          placeholderTextColor={color.palette.lighterGrey}\n          underlineColorAndroid={color.transparent}\n          {...rest}\n          style={inputStyle}\n          ref={forwardedRef}\n        />\n      ) : null}\n    </View>\n  )\n}\n"]},"metadata":{},"sourceType":"script"}
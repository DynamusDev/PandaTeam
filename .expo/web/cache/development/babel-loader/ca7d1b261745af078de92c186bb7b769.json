{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CommonButton = CommonButton;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _text = require(\"../text/text\");\n\nvar _commonButton = require(\"./commonButton.presets\");\n\nvar _ramda = require(\"ramda\");\n\nvar _jsxFileName = \"/Users/alexandrenascimento/Desktop/projetos/PandaTeam/Pandas/app/components/commonButton/commonButton.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction CommonButton(props) {\n  var preset = props.preset,\n      tx = props.tx,\n      name = props.name,\n      background = props.background,\n      styleOverride = props.style,\n      textStyleOverride = props.textStyle,\n      children = props.children,\n      rest = (0, _objectWithoutProperties2.default)(props, [\"preset\", \"tx\", \"name\", \"background\", \"style\", \"textStyle\", \"children\"]);\n  var viewStyle = (0, _ramda.mergeAll)((0, _ramda.flatten)([_commonButton.viewPresets[preset] || _commonButton.viewPresets.primary, styleOverride]));\n  var textStyle = (0, _ramda.mergeAll)((0, _ramda.flatten)([_commonButton.textPresets[preset] || _commonButton.textPresets.primary, textStyleOverride]));\n  return _react.default.createElement(_reactNative.TouchableOpacity, (0, _extends2.default)({\n    style: _objectSpread(_objectSpread({}, viewStyle), {}, {\n      backgroundColor: background\n    })\n  }, rest, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }\n  }), name && _react.default.createElement(_text.Text, {\n    tx: tx,\n    text: name,\n    style: textStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 11\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/alexandrenascimento/Desktop/projetos/PandaTeam/Pandas/app/components/commonButton/commonButton.tsx"],"names":["CommonButton","props","preset","tx","name","background","styleOverride","style","textStyleOverride","textStyle","children","rest","viewStyle","viewPresets","primary","textPresets","backgroundColor"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;;;;;;;;AAOO,SAASA,YAAT,CAAsBC,KAAtB,EAA0C;AAAA,MAG7CC,MAH6C,GAW3CD,KAX2C,CAG7CC,MAH6C;AAAA,MAI7CC,EAJ6C,GAW3CF,KAX2C,CAI7CE,EAJ6C;AAAA,MAK7CC,IAL6C,GAW3CH,KAX2C,CAK7CG,IAL6C;AAAA,MAM7CC,UAN6C,GAW3CJ,KAX2C,CAM7CI,UAN6C;AAAA,MAOtCC,aAPsC,GAW3CL,KAX2C,CAO7CM,KAP6C;AAAA,MAQlCC,iBARkC,GAW3CP,KAX2C,CAQ7CQ,SAR6C;AAAA,MAS7CC,QAT6C,GAW3CT,KAX2C,CAS7CS,QAT6C;AAAA,MAU1CC,IAV0C,0CAW3CV,KAX2C;AAa/C,MAAMW,SAAS,GAAG,qBAAS,oBAAQ,CAACC,0BAAYX,MAAZ,KAAuBW,0BAAYC,OAApC,EAA6CR,aAA7C,CAAR,CAAT,CAAlB;AACA,MAAMG,SAAS,GAAG,qBAChB,oBAAQ,CAACM,0BAAYb,MAAZ,KAAuBa,0BAAYD,OAApC,EAA6CN,iBAA7C,CAAR,CADgB,CAAlB;AAIA,SACE,6BAAC,6BAAD;AAAkB,IAAA,KAAK,kCAAOI,SAAP;AAAkBI,MAAAA,eAAe,EAAEX;AAAnC;AAAvB,KAA4EM,IAA5E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAEIP,IAAI,IACF,6BAAC,UAAD;AAAM,IAAA,EAAE,EAAED,EAAV;AAAc,IAAA,IAAI,EAAEC,IAApB;AAA0B,IAAA,KAAK,EAAEK,SAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHN,CADF;AAQD","sourcesContent":["import React from \"react\"\nimport { TouchableOpacity } from \"react-native\"\nimport { Text } from \"../text/text\"\nimport { viewPresets, textPresets } from \"./commonButton.presets\"\nimport { ButtonProps } from \"./commonButton.props\"\nimport { mergeAll, flatten } from \"ramda\"\n\n/**\n * For your text displaying needs.\n *\n * This component is a HOC over the built-in React Native one.\n */\nexport function CommonButton(props: ButtonProps) {\n  // grab the props\n  const {\n    preset,\n    tx,\n    name,\n    background,\n    style: styleOverride,\n    textStyle: textStyleOverride,\n    children,\n    ...rest\n  } = props\n\n  const viewStyle = mergeAll(flatten([viewPresets[preset] || viewPresets.primary, styleOverride]))\n  const textStyle = mergeAll(\n    flatten([textPresets[preset] || textPresets.primary, textStyleOverride]),\n  )\n\n  return (\n    <TouchableOpacity style={{ ...viewStyle, backgroundColor: background }} {...rest}>\n      {\n        name &&\n          <Text tx={tx} text={name} style={textStyle} />\n      }\n    </TouchableOpacity>\n  )\n}\n"]},"metadata":{},"sourceType":"script"}